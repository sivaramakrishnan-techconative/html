declare const _default: SpecDriver;
export default _default;
export function isDriver(driver: any): driver is Driver;
export function isElement(element: any): element is Element;
export function isSelector(selector: any): selector is Selector;
export function isEqualElements(_driver: Driver, element1: Element, element2: Element): Promise<boolean>;
export function isStaleElementError(error: any): boolean;
export function toDriver(driver: Driver): Driver;
export function toSelector(selector: import('@applitools/driver').CommonSelector<Selector>): Selector;
export function toSimpleCommonSelector(selector: Selector): null | import('@applitools/driver').CommonSelector;
export function executeScript(driver: Driver, script: string | ((arg: any) => any), arg: any): Promise<any>;
export function findElement(driver: Driver, selector: Selector, parent?: undefined | Element): Promise<null | Element>;
export function findElements(driver: Driver, selector: Selector, parent?: undefined | Element): Promise<Array<Element>>;
export function waitForSelector(driver: Driver, selector: Selector, _parent?: undefined | Element, options?: undefined | import('@applitools/driver').WaitOptions): Promise<null | Element>;
export function getElementRegion(_driver: Driver, element: Element): Promise<{
    x: number;
    y: number;
    width: number;
    height: number;
}>;
export function getElementAttribute(_driver: Driver, element: Element, attr: string): Promise<string>;
export function setElementText(_driver: Driver, element: Element, keys: string): Promise<void>;
export function getElementText(_driver: Driver, element: Element): Promise<string>;
export function hover(driver: Driver, element: Element): Promise<void>;
export function click(_driver: Driver, element: Element): Promise<void>;
export function mainContext(driver: Driver): Promise<Driver>;
export function parentContext(driver: Driver): Promise<Driver>;
export function childContext(driver: Driver, element: Element): Promise<Driver>;
export function getDriverInfo(driver: Driver): Promise<import('@applitools/driver').DriverInfo>;
export function getCapabilities(driver: Driver): Promise<Record<string, any>>;
export function getWindowSize(driver: Driver): Promise<{ width: number; height: number; }>;
export function setWindowSize(driver: Driver, size: { width: number; height: number; }): Promise<void>;
export function getOrientation(driver: Driver): Promise<"portrait" | "landscape">;
export function setOrientation(driver: Driver, orientation: "portrait" | "landscape"): Promise<void>;
export function getSystemBars(driver: Driver): Promise<{ statusBar: {
    visible: boolean;
    x: number;
    y: number;
    height: number;
    width: number;
}; navigationBar: {
    visible: boolean;
    x: number;
    y: number;
    height: number;
    width: number;
}; }>;
export function getCookies(driver: Driver, context?: undefined | boolean): Promise<Array<import('@applitools/driver').Cookie>>;
export function getTitle(driver: Driver): Promise<string>;
export function getUrl(driver: Driver): Promise<string>;
export function visit(driver: Driver, url: string): Promise<void>;
export function performAction(driver: Driver, steps: Array<any>): Promise<void>;
export function takeScreenshot(driver: Driver): Promise<string>;
export function getCurrentWorld(driver: Driver): Promise<string>;
export function getWorlds(driver: Driver): Promise<Array<string>>;
export function switchWorld(driver: Driver, name: string): Promise<void>;
export function build(env: any): Promise<[import('selenium-webdriver').WebDriver & { __applitoolsBrand?: undefined; } & { __serverUrl?: undefined | string; }, () => Promise<void>]>;
export type Driver = import('selenium-webdriver').WebDriver & { __applitoolsBrand?: undefined; };
export type Element = import('selenium-webdriver').WebElement & { __applitoolsBrand?: undefined; };
export type ShadowRoot = { 'shadow-6066-11e4-a52e-4f735466cecf': string; };
export type Selector = (import('selenium-webdriver').By | import('selenium-webdriver').ByHash | import('selenium-webdriver').RelativeBy | { using: string; value: string; } | ((webdriver: import('selenium-webdriver').WebDriver) => Promise<any>)) & { __applitoolsBrand?: undefined; };
export type PrimarySpecType = {
    driver: Driver;
    context: Driver;
    element: Element;
    selector: Selector;
    secondary: never;
};
export type SpecDriver = import('@applitools/driver').SpecDriver<PrimarySpecType>;
